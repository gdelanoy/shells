#####################################
# Le Path et les variables système :
#####################################

PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/bin/X11:/usr/local/sbin:/usr/local/bin:~/.scripts:/usr/games:~/fzf-fs:~/.shells/bin"
# PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/bin/X11:/usr/local/sbin:/usr/local/bin:~/.scripts:/usr/games"
ROOTPATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
LDPATH="/lib:/usr/lib:/usr/local/lib:/usr/lib/gcc-lib/i686-pc-linux-gnu/3.2.3"
MANPATH="/usr/share/man:/usr/local/share/man"
INFODIR="/usr/share/info:/usr/local/share/info"
PAGER="/usr/bin/most"
EDITOR="/usr/bin/nvim"
BROWSER="/usr/bin/firefox"
umask 022
export PATH PS1

# FZF :
export FZF_DEFAULT_COMMAND="find . -path '*/\.*' -type d -prune -o -type f -print -o -type l -print 2> /dev/null | sed s/^..//"
export FZF_DEFAULT_OPTS="--height 20% --layout=reverse --multi --preview --exact --prompt='¯\_(ツ)_/¯ ' --margin=0,20%"
export FZF_CTRL_T_OPTS="--prompt='¯\_(ツ)_/¯ ' --preview-window=hidden --margin=0,20% --height 20% --layout=reverse --exact --multi --select-1 --exit-0"
export FZF_CTRL_R_OPTS="--prompt='¯\_(ツ)_/¯ ' --margin=0,20% --height 30% --layout=reverse --exact --preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
export FZF_ALT_C_OPTS="--prompt='¯\_(ツ)_/¯ ' --margin=0,20% --height 30% --layout=reverse --exact --preview 'tree -C {} | head -200'"
export FZF_COMPLETION_TRIGGER='²'


source /home/guillaume/.config/broot/launcher/bash/br

# Mon prompt est complexe, je le définis dans des fichiers à part :
PS1=$(cat ~/.shells/ps1.txt)
PS2=$(cat ~/.shells/ps2.txt)
# PROMPT_COMMAND=$(cat ~/.pscmd.txt)

# Un charset français :
export LESSCHARSET="latin1"

# Des couleurs :
#
source /home/guillaume/.shells/scripts/couleurs.shell

# Paramètres de l'historique des commandes :
#
# Nombre d'entrées dans l'historique :
export HISTORY=100
export SAVEHIST=100
# Fichier ou est stocké l'historique :
export HISTFILE=$HOME/.history
HISTIGNORE="clear:bg:fg:cd:cd -:exit:date:w:* --help"
HISTCONTROL="ignoreboth"
HISTTIMEFORMAT='%Y-%m-%d %H:%M:%S '

# Prise en compte des fichiers cachés :
shopt -s dotglob

# Autres options :
shopt -s cdspell
shopt -s cdable_vars
shopt -s checkhash
shopt -s checkwinsize
shopt -s sourcepath
shopt -s no_empty_cmd_completion
shopt -s cmdhist
shopt -s histappend histreedit histverify
shopt -s extglob
shopt -s nullglob

# Allumer le pavé numérique au login :
case "`tty`" in /dev/tty[0-6]*)
        setleds +num
esac

# Gestion de la couleur pour 'ls' (exportation de LS_COLORS) :
if [ -x /usr/bin/dircolors ]
then
  if [ -r ~/.dircolors ]
  then
    eval "`dircolors ~/.dircolors`"
  elif [ -r /etc/dir_colors ]
  then
    eval "`dircolors /etc/dir_colors`"
  fi
fi

##############
# Fonctions :
##############
#

# Extraction facile :
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# Créer une archive à partir d'un répertoire donné :
mktar() { tar cvf  "${1%%/}.tar"     "${1%%/}/"; }
mktgz() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }
mktbz() { tar cvjf "${1%%/}.tar.bz2" "${1%%/}/"; }

# Créer un répertoire ET cd dedans :
function mkcd() {
    mkdir -p -v $1
    cd $1
}

# Chiffrement / Déchiffrement :
encrypt ()
{
gpg -ac --no-options "$1"
}
decrypt ()
{
gpg --no-options "$1"
}

# Chercher, trouver :
function findc()
   {
      find . -type f | xargs grep -nHi "${1}"
   }
# Trouver des fichiers :
alias ff='find / -type f -name $1'
alias fd='find / -type d -name $1'
alias ffi='sudo find / -iname $1'

# Générateur de mots de passe (indiquer un chiffre pour la longueur) :
genpasswd() {
	local l=$1
   	[ "$l" == "" ] && l=16
      	tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
	}

# Améliorer l'appel des pages de man :
function man()
{
    for i ; do
        xtitle The $(basename $1|tr -d .[:digit:]) manual
        command man -a "$i"
    done
}

# Déboguage en http :
hthead () { /usr/bin/curl -I -L $@ ; }
htdebug () { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n" ; }


# Créer une archive (*.tar.gz) à partir d'un répertoire donné :
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Créer une archive ZIP archive d'un fichier ou d'un répertoire :
function makezip() { zip -r "${1%%/}.zip" "$1" ; }

bofh(){
if [ -x /usr/games/fortune ]; then
	fortune bofh-excuses | cowsay -f $(ls /usr/share/cowsay/cows/ | shuf -n 1) | lolcat
fi
}
# Gestion des processus :
myps() { ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ; }
pp() { my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ; }

# Faire répéter une commande n fois :
function repeat()       # Repeat n times command.
{
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do  # --> C-like syntax
        eval "$@";
    done
}

# Montrer tous les paquetages installés :
showpkg () {
  apt-cache pkgnames | grep -i "$1" | sort
  return;
}


# Pour Noël :
snow() {
	           clear;while :;do echo $LINES $COLUMNS $(($RANDOM%$COLUMNS));sleep 0.1;done|gawk '{a[$3]=0;for(x in a) {o=a[x];a[x]=a[x]+1;printf "\033[%s;%sH ",o,x;printf "\033[%s;%sH*\033[0;0H",a[x],x;}}'
   }

# Afficher une ligne sur trois en vert, pour que les sorties soient plus lisibles :
function thirdline(){ awk '{if (NR%3==0){print "\033[32m" $0 "\033[0m"} else{print}}'; }

# Serve a directory on a given port
# https://davidwalsh.name/serve-directory-python
# $1 = port
# Example: servedir 8080
servedir() {
  # Allow myself to change the port ($1)
  python -m SimpleHTTPServer "$1"
}

# Voir la liste des services lancés lisiblement :
function services() { printf "$(service --status-all 2>&1|sed -e 's/ + /\\E42m + \\E0m/g' -e 's/ - /\\E41m - \\E0m/g' -e 's/ ? /\\E43m ? \\E0m/g')\n"; }

# Interroger le serveur LDAP de la salle de formation :
function ldapfind() {
	        ldapsearch -x -h annuaire.capen.sis -b dc=capen,dc=sis uid=$1
	}

#  Lancer une appli indépendamment du shell d'origine et sans sortie :
function nh() {
	    nohup "$@" &>/dev/null &
    }
# Faut-il vraiment expliquer celle-là ? O:-)
function rtfm() { help $@ || man $@ || $BROWSER "http://www.google.com/search?q=$@"; }

# Montrer les différences entre deux fichiers en couleurs :
function showdiff()
{
	wdiff -n -w $'\033[30;41m' -x $'\033[0m' -y $'\033[30;42m' -z $'\033[0m' $1 $2
}

# Remonter une arborescence autant de niveaux que je le mentionne :
function up() {
	[ "${1/[^0-9]/}" == "$1" ] && {
	 local ups=""
	 for ((i=1; i<=$1; i++))
	 do
	     ups=$ups"../"
	 done
         cd $ups
	      }
	}

# L'édition sécurisée avec vim (créez le répertoire ~/.archives avant) :

function safevi() {
	cp $1 ~/.archives/$(basename ${1}.backup-$(date +%F-%T)) && nvim $1
}

# cd dans le répertoire où ont eu lieu les dernières modifications :
cl()
{
        last_dir="$(ls -Frt | grep '/$' | tail -n1)"
        if [ -d "$last_dir" ]; then
                cd "$last_dir"
        fi
}
# "Marquer" le rép. en cours pour y retourner plus tard :
rd(){
    pwd > "$HOME/.lastdir_$1"
}
# Retourner dans le rép. "marqué" :
crd(){
        lastdir="$(cat "$HOME/.lastdir_$1")">/dev/null 2>&1
        if [ -d "$lastdir" ]; then
                cd "$lastdir"
        else
                echo "no existing directory stored in buffer $1">&2
        fi
}

# Copier-coller en CLI :
copie(){ cp $1 /tmp/copie.$1; }
alias colle="ls /tmp/copie* | sed 's|[^\.]*.\.||' | xargs -I % mv /tmp/copie.% ./%"

# Une couleur au hasard à chaque ligne d'un tail -f :
coltail()
	{
	tail -F "${1}" |while read -r line;do printf "\033[38;5;%dm%s\033[0m\n" $(($RANDOM%255)) "$line";done
	}

morpheus()
	{
	/usr/lib/xscreensaver/glmatrix -window-id $( xwininfo -int -name "Bureau" | grep "Bureau" | awk '{print $4}' ) &
	}

# Faire parler le nordinateur (en anglais) :
say()
	{
espeak "$*" --stdout | play - tempo 0.8 bend 0.1,-500,0.5 chorus 1 1.5 20 1 3 8 -s echos .7 .7 100 .5 10 0.1 reverb
	}

# Faire parler le nordinateur (en français) :
dis()
	{
cd /usr/lib/x86_64-linux-gnu/espeak-data/voices/mb/
espeak -v mb-fr1 "$*" --stdout | play - tempo 0.8 bend 0.1,-500,0.5 chorus 1 1.5 20 1 3 8 -s echos .7 .7 100 .5 10 0.1 reverb
cd -
	}

# Faire parler le nordinateur (en allemand) :
sag()
	{
cd /usr/lib/x86_64-linux-gnu/espeak-data/voices/mb/
espeak -v mb-de2 "$*" --stdout | play - tempo 1.1 bend 0.1,-500,0.5 chorus 1 1.5 20 1 3 8 -s echos .7 .7 100 .5 10 0.1 reverb
cd -
	}

# Comme "please", mais on pose poliment la question (merci Canard) :
function fuck() {
     local last_cmd=$(history -p !!)
     echo -n "run command '${last_cmd}' with sudo? [y/n]: "
     read -s -n 1 confirm
     echo ""
     if [ "${confirm}" = "y" ]; then
     sudo ${last_cmd}
     fi
	}


###############
#  Les alias :
###############

# Se déplacer rapidement dans le filesystem :
#
alias back='cd $OLDPWD'
alias cd..='cd ..'
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

# Raccourcis de répertoires :
#
alias home='cd ~/'
alias documents='cd ~/Documents'
alias downloads='cd ~/Downloads'
alias books='cd ~/eBooks'
alias images='cd ~/Images'
alias videos='cd ~/Videos'
alias web='cd /var/www/html'

# Demander confirmation avant d'écraser un fichier :
#
alias cp='cp --interactive'
alias mv='mv --interactive'
alias rm='rm --interactive'

# Raccourcis pour 'ls' :
#
alias ls='ls --classify --tabsize=0 --literal --color=auto --show-control-chars --human-readable'
alias ll="ls -lv --group-directories-first"
alias lla='ls -la'
alias llo='ls -aol'
alias lli='ls -AlhGrti'
alias lsd="ls -alF | grep /$"
alias lx='ls -lXB'        	# Par extension
alias lk='ls -lSr'        	# Par taille
alias lsize='ls --sort=size -lhr' # Ou comme ça
alias la='ls -Al'        	# Montre les fichiers cachés
alias lr='ls -lR'        	# Récursif
alias lt='ls -ltr'        	# Trié par date
alias lm='ls -al |most'        # pipé dans 'most'
alias l='ls -hF --color'    # quick listing

# Pour se rendre la vie plus facile (et lutter contre la dyslexie) :
#
alias tree='tree -Cs'
alias less='less --quiet'
alias df='df --human-readable'
alias du='du -h --max-depth=1'
alias psgrep='ps aux |grep -v grep |grep -i'
alias count='du -a | cut -d/ -f2 | sort | uniq -c | sort -nr'
# alias findn='find . -iname '"${1}"''
alias tu='top -o cpu' #cpu
alias tm='top -o vsize' #memory
alias biggest='BLOCKSIZE=1048576; du -chx | sort -rh'
alias tf='tail -f '
alias dn='OPTIONS=$(\ls -F | grep /$); select s in $OPTIONS; do cd $PWD/$s; break;done'
alias path='echo -e ${PATH//:/\\n}'
alias xs="cd"
alias vf="cd"
alias see="bat"
alias mpv="mpv --no-audio-display"
alias couleurs="grep  '# Color' ~/.bashrc"
alias nabo='nano'


# Des gadgets rigolos ( il en faut ;-) ) :
#
alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]'"
alias wesh="espeak -s 1 -p 0.0001 'wesh'; clear"
alias kikoo="fortune bofh-excuses | cowsay -f $(ls /usr/share/cowsay/cows/ | shuf -n 1) | lolcat"
alias tux='xpenguins -n 50 --all'
alias meteo='curl http://wttr.in/Wasquehal'
alias rouletterusse='[ $[ $RANDOM % 6 ] == 0 ] && echo "T es mort !" || echo "Tu vis."'

alias joue='cd /media/guillaume/ssdusb/Musique/ ; mpv $(/home/guillaume/.fzf/bin/fzf); cd - '


# Administration :
#
alias reload='source ~/.bashrc'
alias confctrl='grep "^[^#]" $1'
alias nocomm='grep -v '^$\|^\s*\#' $1'
alias nslookup='nslookup -sil'
alias LOG="tail -f /var/log/*log /var/log/*/*log"
alias LOGS="find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"
alias dmesg='dmesg -wx'
alias dff='df -h -x tmpfs -x usbfs'
alias psg='ps -ef | grep $1'
alias fastping='ping -c 100 -s.2'
alias ports='netstat -laputn'
alias updb='sudo updatedb &'
alias swapflush="echo swapoff && sudo swapoff -a && echo swapon && sudo swapon -a && echo done"
alias burn='pkill -9'
alias px='ps aux | grep '
alias ct='column -t'
alias dfc='df -hPT | column -t'
alias untar='tar -zxvf'
alias ipext='curl ipinfo.io/ip'
alias ipin='hostname -I'
alias myip="ip -br -c a"
alias which='type -all'
alias debug="set -o nounset; set -o xtrace"
alias ssytemctl='systemctl'
alias sstatus="sudo systemctl status -l"
alias srestart="sudo systemctl restart"
# alias tue="sudo pkill"
alias mem="free -h"
alias cdtmp="cd $(mktemp -d)"
alias top-commands='history | awk "{print $2}" | awk "BEGIN {FS="|"} {print $1}" |sort|uniq -c | sort -rn | head -10'
alias neo='su -c cmatrix guillaume'
alias cputemp='sensors | grep Core'
alias chx='chmod 755'
alias chr='chmod 644'
alias ipinfo='curl ipinfo.io'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias cmderror='/usr/local/bin/cmderror'
alias showconn="lsof -Pan -i tcp -i udp"

alias mdpdf=" ~/.pandoc/md2pdf"

alias script='script ~/.archives/script_sessions/session-$(date +%d-%m-%Y__%Hh-%Mm-%Ss).txt'

alias pping="prettyping"
alias fic="find /var/www/html/formation/ -type f -exec chmod 644 {} \; && find /var/www/html/formation/ -type d -exec chmod 755 {} \;"

# Les machines du réseau local :
alias nwho='ping -b -c 2 255.255.255.255 2>&1 | grep "bytes from" | cut -d " " -f 4 | sort | uniq | sed -e "s/://g"'

# Trouver ce qui prend de la place sur tout le filesystem :
#
alias diskspace="du -S | sort -n -r |more"
# La taille des répertoires dans le rép. en cours :
alias folders="find . -maxdepth 1 -type d -print | xargs du -sk | sort -rn"

alias br="br --sizes -dp"

# Raccourcis pour la gestion des paquetages :
#
alias apti='sudo apt-get install'
alias apts="sudo apt-cache search"
alias aptr='sudo apt-get remove'
alias orphand='sudo deborphan | xargs sudo apt-get -y remove --purge'
alias aptclean='sudo apt-get autoclean && sudo apt-get autoremove && sudo apt-get clean && sudo apt-get remove && orphand'
alias maj="sudo apt-get update && sudo apt-get upgrade --only-upgrade -y | tee /var/log/divers/packages-update-$(date +%F).log; sudo apt-get -f install; sudo apt autoclean; sudo apt autoremove"

# Arrêt / Reboot :
#
# (à combiner avec quelques binaires autorisés en NOPASSWD dans la conf de sudo)
alias dodo='sudo /sbin/poweroff'
alias reboot='sudo /sbin/reboot'
alias poweroff='sudo /sbin/poweroff'
alias halt='sudo /sbin/poweroff'
alias shutdown='sudo /sbin/shutdown'

# Date et Heure :
alias stamp='date "+%A_%d/%m/%Y_%Hh%M"'
alias d='date +%F'
alias now='date +"%T"'

#############################################################
# Des commandes vers mes propres scripts, ou personnalisées :
#############################################################

# Mes montages chiffrés :
alias safe-in-cloud='encfs "/home/guillaume/Cloud/MEGAsync/Cloud Drive/Safe/" /home/guillaume/safe-in-cloud/ && df -h | grep -i cloud'
alias safe-on-usb='encfs /media/$USER/USBPRO/Coffre-fort ~/safe-on-usb && df -h | grep safe-on'

# Mes scripts de session byobu :
alias hop='bash ~/.shells/scripts/byobu-session-GdY.sh'
alias poe='bash ~/.scripts/byobu-poe.sh'

# POUR LE BOULOT :
#

alias ck="/usr/bin/i3lock -n -c 000000 2>/dev/null"


# Wake On LAN pour la salle de formation :
# Tous :
# alias wola="wakeonlan `cat /etc/WoL/macadd-all.txt` && order4-sucmd reboot"
# Chaque poste individuellement :
# alias wol1="wakeonlan `cat /etc/WoL/macadd-formation1.txt`"
# alias wol2="wakeonlan `cat /etc/WoL/macadd-formation2.txt`"
# alias wol3="wakeonlan `cat /etc/WoL/macadd-formation3.txt`"
# alias wol4="wakeonlan `cat /etc/WoL/macadd-formation4.txt`"
# alias wol5="wakeonlan `cat /etc/WoL/macadd-formation5.txt`"
# alias wol6="wakeonlan `cat /etc/WoL/macadd-formation6.txt`"
# alias wol7="wakeonlan `cat /etc/WoL/macadd-formation7.txt`"
# alias wol8="wakeonlan `cat /etc/WoL/macadd-formation8.txt`"
# alias wol9="wakeonlan `cat /etc/WoL/macadd-formation9.txt`"
# alias wol10="wakeonlan `cat /etc/WoL/macadd-formation10.txt`"
#
# Prise de contrôle graphique des postes de la salle de formation :
#
alias remote1='xtightvncviewer -via "formateur@formation1" localhost:0'
alias remote2='xtightvncviewer -via "formateur@formation2" localhost:0'
alias remote3='xtightvncviewer -via "formateur@formation3" localhost:0'
alias remote4='xtightvncviewer -via "formateur@formation4" localhost:0'
alias remote5='xtightvncviewer -via "formateur@formation5" localhost:0'
alias remote6='xtightvncviewer -via "formateur@formation6" localhost:0'
alias remote7='xtightvncviewer -via "formateur@formation7" localhost:0'
alias remote8='xtightvncviewer -via "formateur@formation8" localhost:0'
alias remote9='xtightvncviewer -via "formateur@formation9" localhost:0'
alias remote10='xtightvncviewer -via "formateur@formation10" localhost:0'
#
# Raccourcis pratiques pendant les cours :
#
alias sss="ssh formateur@serveur"
alias sse="ssh formateur@serveuse"
#
alias ss1="ssh formateur@formation1"
alias ss2="ssh formateur@formation2"
alias ss3="ssh formateur@formation3"
alias ss4="ssh formateur@formation4"
alias ss5="ssh formateur@formation5"
alias ss6="ssh formateur@formation6"
alias ss7="ssh formateur@formation7"
alias ss8="ssh formateur@formation8"
alias ss9="ssh formateur@formation9"
alias ss10="ssh formateur@formation10"
#
alias ssv="ssh formateur@192.168.20.82"
alias ssv2="ssh formateur@192.168.20.83"
#
# Pour que les accèdent directment à leur VM Debian 7 sur le Proxmox de la salle de formation :
alias vm7='ssh formation@serveur -p 2200$(echo $HOSTNAME | tail -c2)'

################
# à peaufiner :
################

# alias backup='rsync -r -t -p -o -g -x -v --progress --delete -c -H -i -s /home/nickyeoman/saveme /media/nickyeoman/portabledrive'


###############################
# Pour les différentes applis :
###############################

# Raccourcis pour 'grep' :
#
alias {G,g}{re,er}p='grep'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'

# Raccourcis pour 'sudo' :
#
alias please='sudo $(history -p \!\!)'
alias sduo='sudo'
alias suod='sudo'
alias svi='sudo nvim'
alias us="su"

# VIM :
#
alias vi='nvim'
alias edit='nvim'
alias emacs='nvim'

# IPtables :
#
alias iptl='sudo /sbin/iptables -L -n -v --line-numbers'
alias iptlin='sudo /sbin/iptables -L INPUT -n -v --line-numbers'
alias iptlout='sudo /sbin/iptables -L OUTPUT -n -v --line-numbers'
alias iptlfw='sudo /sbin/iptables -L FORWARD -n -v --line-numbers'
alias iptlnat='sudo /sbin/iptables -t nat -n -v --line-numbers'

#Rsync :
# alias usbb='rsync -avz /media/usbdisk/ ~/backup/usb/'

# Git :
alias yolo='(git add . && git commit -a -m "Commit du $(date "+%A %d %B %Y") à $(date "+%H heures %M") ." ; git push origin master)'
alias gitar="git ls-files -d -m -o -z --exclude-standard | xargs -0 git update-index --add --remove"
alias g='git'
alias gpd='git push origin develop'
alias gpm='git push origin master'
alias gst='git status'
alias gcom='git commit -m --all'
alias gclo='git clone'
alias glog='git log'
alias gadd='git add . --verbose'
alias gco='git checkout'
alias gls='git ls-files'
alias gpall='git push --all'

# MySQL / MariaDB :
alias msr='mysql -u root -p'

# Apache :
alias restartapache='sudo systemctl restart apache2 && sudo systemctl status -l apache2'
alias apachedit='sudo vim /etc/apache2/apache2.conf'
alias apachegrace='sudo apachectl graceful'
alias apachelog="less +F /var/log/apache2/*.log"

# Ansible :
# Récupérer les facts Ansible de n'importe quel serveur en un instant :
ansibleSetup() {
    ansible $1 -m setup > ~/$1.txt
}
alias accio=ansibleSetup
alias ans='ansible'
alias ansp='ansible-playbook'

# Docker :
# alias dockip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
# alias dockd="docker run -d -P"			# Daemonized container
# alias docki="docker run -t -i -P"       	# Insteractive container

# dockb() { docker build -t="$1" .; }		# docker build
# dockri() { docker rmi $(docker images -q); }	# rm image
# dockrm() { docker rm $(docker ps -q -a); }	# rm container

# alias dockmenage="docker container rm $(docker container ps -a -q)"
# alias dockercleancontainers="docker ps -aq | xargs docker rm"
# alias dockercleanimages="docker images -aq -f dangling=true | xargs docker rmi"
# alias dockerclean="dockercleancontainers && dockercleanimages"
# alias docker-killall="docker ps -q | xargs docker kill"

# alias dl='docker ps -l -q'
# alias drm="docker rm"
# alias dps="docker ps -a"
# alias dockimg="docker images | uniq -f 3"
# alias dockps="docker ps -a | less -S"
# alias dockip="docker inspect --format '{{ .NetworkSettings.IPAddress }}' $1"
# alias docklog="docker logs -f -t $1"
# alias dockstat="docker stats $1"
# alias dockrmimg="docker images -aq -f dangling=true | xargs docker rmi"
# alias dockkillall="docker ps -q | xargs docker kill"


# LXC :

alias lxcls="lxc-ls --fancy"
alias lxcat="lxc-attach -n $@"
alias lxcstop="lxc-stop -n $@"
alias lxcstart="lxc-start -n $@"


# La box de configuration de l'interface graphique de Voyager :
alias box='box=$(yad --title=Voyager --window-icon="/usr/share/xfce4/voyager/p1.png" --image="/usr/share/xfce4/voyager/Voyager0.png" --image-on-top --separator="" --width=300 --height=260 --list --radiolist --no-headers --column="1" --column="option" --print-column 2 true "Voyager Wall" false "Conky Control" false "Plank Control" false "Colors Icons" false "Reparation" false "System Infos")'

#
# Générer des Shell Scripts avec de bonnes options de départ :
#

shscr(){
	echo "#!/bin/bash" > ${1}
	echo "######################################" >> ${1}
	echo "# Nom du script : $(basename $1)" >> ${1}
	echo "# Utilité: ce script sert à faire pousser des fleurs" >> ${1}
	echo "# Usage: ... (le cas échéant)" >> ${1}
	echo "# Auteur: Guillaume Delanoy <gdelanoy@gmail.com" >> ${1}
	echo "# Créé le: $( date "+%A_%d/%m/%Y à %Hh%M")" >> ${1}
	echo "######################################" >> ${1}
	echo "#" >> ${1}
	echo "set -o errexit" >> ${1}
        echo "set -o nounset" >> ${1}
	echo "#" >> ${1}
	echo "# VARIABLES :" >> ${1}
	echo "#" >> ${1}
	echo '#Set Colors ' >> ${1}
	echo '# ' >> ${1}
	echo 'bold=$(tput bold) ' >> ${1}
	echo 'underline=$(tput sgr 0 1) ' >> ${1}
	echo 'reset=$(tput sgr0) ' >> ${1}
	echo 'purple=$(tput setaf 171) ' >> ${1}
	echo 'red=$(tput setaf 1) ' >> ${1}
	echo 'green=$(tput setaf 76) ' >> ${1}
	echo 'tan=$(tput setaf 3) ' >> ${1}
	echo 'blue=$(tput setaf 38) ' >> ${1}
	echo '# ' >> ${1}
	echo '# Headers and  Logging ' >> ${1}
	echo '# ' >> ${1}
	echo 'e_header() { printf "\n${bold}${purple}==========  %s  ==========${reset}\n" "$@"  ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_arrow() { printf "➜ $@\n" ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_success() { printf "${green}✔ %s${reset}\n" "$@" ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_error() { printf "${red}✖ %s${reset}\n" "$@" ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_warning() { printf "${tan}➜ %s${reset}\n" "$@" ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_underline() { printf "${underline}${bold}%s${reset}\n" "$@" ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_bold() { printf "${bold}%s${reset}\n" "$@" ' >> ${1}
	echo '} ' >> ${1}
	echo 'e_note() { printf "${underline}${bold}${blue}Note:${reset}  ${blue}%s${reset}\n" "$@" ' >> ${1}
	echo '} ' >> ${1}
	echo "#" >> ${1}
	echo "# FONCTIONS :" >> ${1}
	echo "#" >> ${1}
	echo "stamp(){ 'date "+%A_%d/%m/%Y_%Hh%M"' }" >> ${1}
	echo "tps=$(date +%F)" >> ${1}
	echo "now=$(date +%T)" >> ${1}
	echo "source /etc/skel/.scripts/functions.sh" >> ${1}
	echo "#" >> ${1}
	echo "#" >> ${1}
	echo "# LE SCRIPT PROPREMENT DIT : " >> ${1}
	echo "#" >> ${1}
	echo "" >> ${1}
	echo "e_header $(basename ${1})" >> ${1}
	echo "" >> ${1}
	echo "" >> ${1}
	chmod 750 ${1}
	vim ${1}
}

#
# FZF : The Fuzzy Finder :
#

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | xargs kill -${1:-9}
    fi
}



# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exact --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fh - repeat history
runcmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>' ; }

fh() {
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

fcd() {     if [[ "$#" != 0 ]]; then         builtin cd "$@";         return;     fi;     while true; do         local lsd=$(echo ".." && ls -p | grep '/$' | sed 's;/$;;');         local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')";         [[ ${#dir} != 0 ]] || return 0;         builtin cd "$dir" &> /dev/null;     done; }


alias f='. fzf-fs'
alias byz='tmux list-windows -F "#I:#W" | fzf-tmux | cut -d ":" -f 1 | xargs tmux select-window -t'
alias tue="sudo /home/guillaume/.shells/bin/fk"


# [ -f ~/.oh-my-fzf.bash ] && . ~/.oh-my-fzf.bash


